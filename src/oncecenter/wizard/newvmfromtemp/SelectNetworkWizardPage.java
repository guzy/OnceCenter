package oncecenter.wizard.newvmfromtemp;

import java.util.ArrayList;

import oncecenter.Activator;
import oncecenter.util.ImageRegistry;
import oncecenter.views.xenconnectiontreeview.elements.VMTreeObject;
import oncecenter.wizard.newvmfromtemp.SelectServerWizardPage.TableLabelProvider;
import oncecenter.wizard.newvmfromtemp.SelectTemplateWizardPage.wizardTemplate;

import org.apache.xmlrpc.XmlRpcException;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.ui.plugin.AbstractUIPlugin;

import com.once.xenapi.Network;
import com.once.xenapi.Types.BadServerResponse;
import com.once.xenapi.Types.XenAPIException;

public class SelectNetworkWizardPage extends NewVMPage {

	VMTreeObject selection;
	Table table;
	ArrayList<Network> nets;
	TableViewer tableViewer;
	ArrayList<Net> netObjects = new ArrayList<Net>();

	
	public SelectNetworkWizardPage(VMTreeObject selection) {
		super("wizardPage");
		setTitle("选择网络");
		setDescription("您选择的模板提供了以下虚拟网关，您可以进行配置或删除");
		this.selection=selection;
		
		
	}
	@Override
	public void createControl(Composite parent) {
		
		nets = ((NewVmFTWizard)this.getWizard()).nets;
		
		final Composite composite = new Composite(parent, SWT.NULL);

		table = new Table(composite, SWT.FULL_SELECTION | SWT.BORDER_SOLID);

		table.setBounds(10, 44, 519, 200);
		table.setLinesVisible(true);

		TableColumn tc1 = new TableColumn(table, SWT.CENTER);
		TableColumn tc2 = new TableColumn(table, SWT.CENTER);
		tc1.setText("MAC");
		tc2.setText("网络");
		tc1.setWidth(100);
		tc2.setWidth(100);
		table.setHeaderVisible(true);
		
		tableViewer = new TableViewer(table);
		tableViewer.setContentProvider(new ArrayContentProvider());
		tableViewer.setLabelProvider(new TableLabelProvider());
		
		for(Network net:nets){
			try {
				Net n = new Net("<autogenerated MAC>", net.getNameLabel(selection.getConnection()),net);
				netObjects.add(n);
			} catch (BadServerResponse e) {
				
				e.printStackTrace();
			} catch (XenAPIException e) {
				
				e.printStackTrace();
			} catch (XmlRpcException e) {
				
				e.printStackTrace();
			}
		}
		tableViewer.setInput(netObjects);
		
		//table.pack();
		this.setControl(composite);
	}
	
	class TableLabelProvider extends LabelProvider implements ITableLabelProvider {

		 @Override
		 public Image getColumnImage(Object element, int columnIndex) {
			 if(element instanceof Net) {
				 switch(columnIndex) {
				   case 0:
						   return ImageRegistry.getImage(ImageRegistry.NETWORK);
					   
				   }   
			  }
			  
			  return null;
		 }

		 @Override
		 public String getColumnText(Object element, int columnIndex) {
		  if(element instanceof Net) {
			  Net net=(Net)element;
		   switch(columnIndex) {
		   case 0:
		    return net.getMac();
		   case 1:
			   return net.getName();
		   }
		  }
		  
		  return null;
		 }
	}
	
	class Net {
		private String mac;
		private Network net;
		private String name;
		public Net(String mac,String name,Network net){
			this.setMac(mac);
			this.setNet(net);
			this.setName(name);
		}
		public String getMac() {
			return mac;
		}
		public void setMac(String mac) {
			this.mac = mac;
		}
		public Network getNet() {
			return net;
		}
		public void setNet(Network net) {
			this.net = net;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
	}
	@Override
	protected boolean nextButtonClick() {
		
		int index = table.getSelectionIndex();
		Net n = netObjects.get(index);
		((NewVmFTWizard)this.getWizard()).net = n.getName();
		((NewVmFTWizard)this.getWizard()).selectedNet = n.getNet();
		return true;
	}

}
