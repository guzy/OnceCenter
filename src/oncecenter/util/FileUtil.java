/**
 * CopyRight(2011- ) Insititute of Sofeware, Chinese Academy of Sciences
 */
package oncecenter.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.Reader;

import oncecenter.Activator;
import oncecenter.Constants;

import org.eclipse.core.runtime.Platform;

/**
 * @author wuheng
 * @email wuheng09@gmail.com
 * @date 2012-12-23
 * 
 */
public class FileUtil {

	public static final ObjectInputStream NULL_Connections_INFO = null;

	/**************************************************************************
	 * 
	 *                     XenCenter root
	 * 
	 **************************************************************************/
	@SuppressWarnings("deprecation")
	public static String getXenCenterRoot() {
		try {
			return Platform.asLocalURL(Platform.getBundle(Activator.PLUGIN_ID).getEntry("")).getPath();
		} catch (IOException e) {
			return System.getProperty("user.dir");
		}
	}

	/**************************************************************************
	 * 
	 *                     workspace root and conf root
	 *  the configure files generated by runtime are stored under workspace root; 
	 *  the other configure files are stored under conf root
	 *  
	 **************************************************************************/
	public static String getWorkSpace()  {
		return getXenCenterRoot() + Constants.DEFAULT_WORKSPACE_ROOT;
	}
	
	public static String getConf()  {
		return getXenCenterRoot() + Constants.DEFAULT_WORKSPACE_ROOT
				+ File.separator + Constants.DEFAULT_CONFIG_ROOT;
	}
	
	public static String getData() {
		return getXenCenterRoot() + Constants.DEFAULT_WORKSPACE_ROOT
				+ File.separator + Constants.DEFAULT_DATA_ROOT;
	}
	
	public static String getLog(){
		return getXenCenterRoot() + Constants.DEFAULT_WORKSPACE_ROOT + File.separator
				+ Constants.DEFAULT_LOG_ROOT;
	}
	/**************************************************************************
	 * 
	 *                   get config file path
	 * 
	 **************************************************************************/
	public static String getVMsInfoConfigFile() {
		return getConf() + File.separator + Constants.DEFAULT_VMs_INFO_CONFIG_FILE;
	}

	public static String getSRTypesConfigFile() {
		return getConf() + File.separator + Constants.DEFAULT_SR_TYPES_CONFIG_FILE;
	}
	
	public static String getMenuConfigFile() {
		return getConf() + File.separator + Constants.DEFAULT_MENU_CONFIG_FILE;
	}
	
	public static String getToolbarConfigFile(){
		return getConf() + File.separator + Constants.DEFAULT_TOOLBAR_CONFIG_FILE;
	}
	
	public static String getGroupConfigFile() {
		return getConf() + File.separator + Constants.DEFAULT_VM_GROUP_CONFIG_FILE;
	}
	
	public static String getSnapshotStrategyConfigFile() {
		return getConf() + File.separator + Constants.DEFAULT_SNAPSHOTSTRATEGY_CONFIG_FILE;
	}
	/**************************************************************************
	 * 
	 *                    get config file Content
	 * 
	 **************************************************************************/
	public static ObjectInputStream getHistoryConnectionsInfo() {
		File file = new File(getVMsInfoConfigFile());
		try {
			return file.exists() ? 
					new ObjectInputStream(
							new FileInputStream(file))
					: NULL_Connections_INFO;
		} catch (IOException e) {
			return NULL_Connections_INFO;
		}
	}
	
	/**************************************************************************
	 * 
	 *                    Common file operators
	 * 
	 **************************************************************************/
	public static boolean makeDir(File file) {
		if (!file.exists()) {
			return file.mkdirs();
		}
		return true;
	}

	public static void deleteDir(File file) {
		if (file.exists()) {
			if (file.isFile()) {
				file.delete();
			} else if (file.isDirectory()) {
				File files[] = file.listFiles();
				for (int i = 0; i < files.length; i++) {
					deleteDir(files[i]);
				}
			}
			file.delete();
		} else {
//			System.out.println("not exist!" + '\n');
		}
	}

	public static void getHistory() {
		File file = new File(FileUtil.getXenCenterRoot() + "historyServers");
		if (!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				
				e.printStackTrace();
				return;
			}
		}
		Reader reader = null;
		try {
			reader = new InputStreamReader(new FileInputStream(file));
			int tempchar;
			String ip = "";
			while ((tempchar = reader.read()) != -1) {
				if (((char) tempchar) == ',') {
					Constants.historyServer.add(ip);
					ip = "";
				} else {
					ip += (char) tempchar;
				}
			}
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) throws IOException {
		System.out.println(getXenCenterRoot());
	}
}
